{"version":3,"sources":["components/Titles.js","components/Form.js","components/Hike.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getTrails","type","name","placeholder","Hike","error","id","class","onChange","getPublic","readonly","tabindex","getSafety","getWeather","getEmergency","getTraffic","subcribe","App","state","undefined","email","event","a","preventDefault","city","target","elements","value","setState","publicState","checked","console","log","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7382e12d.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst Titles = () => (\r\n    <div>\r\n        <h1 className=\"title-container__title\">WASHINGTON FEED</h1>\r\n        <p className=\"title-container__subtitle\"> your number one newsletters subscription</p>\r\n    </div>\r\n)\r\n\r\nexport default Titles","import React from \"react\"\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.getTrails}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"Enter your City or County\"/>\r\n        <button className=\"text\">Search</button>\r\n    </form>\r\n)\r\n\r\nexport default Form","import React from \"react\"\r\n\r\nconst Hike = props => (\r\n        <div>\r\n              <div className=\"row\">\r\n                <div className=\"col-xs-5 title-container1\">\r\n                \r\n                    <div className=\"hike__info\">\r\n                        { props.error && <p className=\"hike__error\">{ props.error }</p> }\r\n                        { props.id && <p className=\"hike__key\">\r\n                            Showing subscriptions in \r\n                            <span className=\"hike__value\"> { props.id }</span>\r\n\r\n                            <p></p>\r\n                            <p>\r\n                                <div class=\"wrap\">\r\n                                    <div>\r\n                                        <span className=\"text1\">Public</span>\r\n                                    </div>\r\n                                    <div class=\"ui fitted toggle checkbox\">\r\n                                        <input type=\"checkbox\" name =\"public\" className=\"text1\" onChange={props.getPublic} readonly=\"\" tabindex=\"\" />\r\n                                        <label></label>\r\n                                    </div>\r\n                                </div>\r\n                            </p>\r\n\r\n                            <p>\r\n                                <div class=\"wrap\">\r\n                                    <div>\r\n                                        <span className=\"text1\">Safety</span>\r\n                                    </div>\r\n                                    <div class=\"ui fitted toggle checkbox\">\r\n                                        <input type=\"checkbox\" name=\"safety\" className=\"text1\" onChange={props.getSafety} tabindex=\"\" />\r\n                                        <label></label>\r\n                                    </div>\r\n                                </div>\r\n                            </p>\r\n\r\n                            <p>\r\n                                <div class=\"wrap\">\r\n                                    <div>\r\n                                        <span className=\"text1\">Weather</span>\r\n                                    </div>\r\n                                    <div class=\"ui fitted toggle checkbox\">\r\n                                        <input type=\"checkbox\" name=\"weather\" className=\"text1\" onChange={props.getWeather} tabindex=\"\" />\r\n                                        <label></label>\r\n                                    </div>\r\n                                </div>\r\n                            </p>\r\n\r\n                            <p>\r\n                                <div class=\"wrap\">\r\n                                    <div>\r\n                                        <span className=\"text1\">Emergency</span>\r\n                                    </div>\r\n                                    <div class=\"ui fitted toggle checkbox\">\r\n                                        <input type=\"checkbox\" name=\"emergency\" className=\"text1\" onChange={props.getEmergency} tabindex=\"\" />\r\n                                        <label></label>\r\n                                    </div>\r\n                                </div>\r\n                            </p>\r\n\r\n                            <p>\r\n                                <div class=\"wrap\">\r\n                                    <div>\r\n                                        <span className=\"text1\">Traffic</span>\r\n                                    </div>\r\n                                    <div class=\"ui fitted toggle checkbox\">\r\n                                        <input type=\"checkbox\" name=\"traffic\" className=\"text1\" onChange={props.getTraffic} tabindex=\"\" />\r\n                                        <label></label>\r\n                                    </div>\r\n                                </div>\r\n                            </p>\r\n\r\n                            <p>Please enter your email:     \r\n                            </p>\r\n                           <p className=\"text\">\r\n                                <form onSubmit={props.subcribe}>\r\n                                    <input type=\"text2\" name=\"email\" placeholder=\"first.last@example.com\"/>\r\n                                    <button>Subcribe</button>\r\n                                </form>\r\n                            </p>\r\n                        </p>\r\n                        }\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"col-xs-5 form-container1\">\r\n\r\n                <div className=\"hike__info\">\r\n                        { props.error && <p className=\"hike__error\">{ props.error }</p> }\r\n                        { props.id && <p className=\"para\">\r\n                            Welcome to Washington Feed! Enter your location to find a curated subscription list \r\n                            to your local news outlets. Toggle the category of news you would like to subscribe \r\n                            to then enter your email address and click the subscribe button. Thank you for using \r\n                            our services!\r\n                            <p></p>\r\n                        </p>\r\n                        }\r\n                    </div>\r\n\r\n                </div>\r\n              </div>\r\n        </div>\r\n)\r\n\r\nexport default Hike\r\n","import React from \"react\"\n\nimport Titles from \"./components/Titles\"\nimport Form from \"./components/Form\"\nimport Hike from \"./components/Hike\"\n\n\nclass App extends React.Component {\n  state = {\n    id: undefined,\n    error: undefined,\n    email: undefined\n  }\n\n  getTrails = async (event) => {\n    event.preventDefault()\n    \n    const city = event.target.elements.city.value\n\n    if (city) {\n      this.setState({\n        id: city,\n        error: \"\"\n      })\n    } else {\n      this.setState({\n        id: undefined,\n        error: \"Please enter a value\"\n      })\n    }\n  }\n\n  getPublic = async (event) => {\n    event.preventDefault()\n    const publicState = event.target.checked;\n    console.log(publicState)\n\n  }\n\n  getSafety = async (event) => {\n    event.preventDefault()\n\n    console.log(\"safety\")\n\n  }\n\n  getWeather = async (event) => {\n    event.preventDefault()\n\n    console.log(\"weather\")\n\n  }\n\n  getEmergency = async (event) => {\n    event.preventDefault()\n\n    console.log(\"emergency\")\n\n  }\n\n  getTraffic = async (event) => {\n    event.preventDefault()\n\n    console.log(\"traffic\")\n\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"row-sm-5 title-container\">\n              <Titles />\n            </div>\n            <div className=\"row-xs-7 form-container\">\n              <Form getTrails={this.getTrails}/>\n              <Hike \n                id={this.state.id}\n                subcribe={this.subcribe}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}